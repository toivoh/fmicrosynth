// Generated by julia/codegen.jl -- rerun to regenerate
`include "fmicrosynth_generated.vh"

module fms_next_state_function(
        input [`STATE_BITS-1:0] state,
        output reg [`STATE_BITS-1:0] next_state
    );
    always @* begin
        case (state)
            `INST_NOP: next_state = `INST_NOP;
            `INST_ACC_IMM_TO_MEM: next_state = `INST_ACC_IMM_TO_MEM_2;
            `INST_MACC_TO_MEM: next_state = `INST_MACC_TO_MEM_2;
            `INST_WADD: next_state = `INST_WADD_2;
            `INST_LPFILTER: next_state = `INST_LPFILTER_2;
            `INST_PULSE_EXP2: next_state = `INST_PULSE_EXP2_2;
            `INST_PULSE: next_state = `INST_PULSE_2;
            `INST_TRIANGLE: next_state = `INST_TRIANGLE_2;
            `INST_SINA2: next_state = `INST_SINA2_2;
            `INST_SIN: next_state = `INST_SIN_2;
            `INST_LFSR: next_state = `INST_LFSR_2;
            `INST_OUTPUT: next_state = `INST_OUTPUT_2;
            `INST_OUTPUT_A: next_state = `INST_OUTPUT_A_2;
            `INST_DITHER_UPDATE: next_state = `INST_DITHER_UPDATE_2;
            `INST_IMM: next_state = `INST_NOP;
            `INST_ACC_TO_IMM: next_state = `INST_ACC_TO_IMM_2;
            `INST_ACC_IMM_TO_MEM_2: next_state = `INST_ACC_IMM_TO_MEM_3;
            `INST_ACC_IMM_TO_MEM_3: next_state = `INST_ACC_IMM_TO_MEM_4;
            `INST_ACC_IMM_TO_MEM_4: next_state = `INST_NOP;
            `INST_MACC_TO_MEM_2: next_state = `INST_MACC_TO_MEM_3;
            `INST_MACC_TO_MEM_3: next_state = `INST_MACC_TO_MEM_4;
            `INST_MACC_TO_MEM_4: next_state = `INST_MACC_TO_MEM_5;
            `INST_MACC_TO_MEM_5: next_state = `INST_WADD_7;
            `INST_WADD_2: next_state = `INST_WADD_3;
            `INST_WADD_3: next_state = `INST_WADD_4;
            `INST_WADD_4: next_state = `INST_WADD_5;
            `INST_WADD_5: next_state = `INST_WADD_6;
            `INST_WADD_6: next_state = `INST_WADD_7;
            `INST_WADD_7: next_state = `INST_NOP;
            `INST_LPFILTER_2: next_state = `INST_LPFILTER_3;
            `INST_LPFILTER_3: next_state = `INST_LPFILTER_4;
            `INST_LPFILTER_4: next_state = `INST_LPFILTER_5;
            `INST_LPFILTER_5: next_state = `INST_LPFILTER_6;
            `INST_LPFILTER_6: next_state = `INST_LPFILTER_7;
            `INST_LPFILTER_7: next_state = `INST_NOP;
            `INST_PULSE_EXP2_2: next_state = `INST_PULSE_EXP2_3;
            `INST_PULSE_EXP2_3: next_state = `INST_PULSE_EXP2_4;
            `INST_PULSE_EXP2_4: next_state = `INST_PULSE_3;
            `INST_PULSE_2: next_state = `INST_PULSE_3;
            `INST_PULSE_3: next_state = `INST_PULSE_4;
            `INST_PULSE_4: next_state = `INST_PULSE_5;
            `INST_PULSE_5: next_state = `INST_NOP;
            `INST_TRIANGLE_2: next_state = `INST_TRIANGLE_3;
            `INST_TRIANGLE_3: next_state = `INST_TRIANGLE_4;
            `INST_TRIANGLE_4: next_state = `INST_TRIANGLE_5;
            `INST_TRIANGLE_5: next_state = `INST_SIN_13;
            `INST_SINA2_2: next_state = `INST_SINA2_3;
            `INST_SINA2_3: next_state = `INST_SINA2_4;
            `INST_SINA2_4: next_state = `INST_SIN_10;
            `INST_SIN_2: next_state = `INST_SIN_3;
            `INST_SIN_3: next_state = `INST_SIN_4;
            `INST_SIN_4: next_state = `INST_SIN_5;
            `INST_SIN_5: next_state = `INST_SIN_6;
            `INST_SIN_6: next_state = `INST_SIN_7;
            `INST_SIN_7: next_state = `INST_SIN_8;
            `INST_SIN_8: next_state = `INST_SIN_9;
            `INST_SIN_9: next_state = `INST_SIN_10;
            `INST_SIN_10: next_state = `INST_SIN_11;
            `INST_SIN_11: next_state = `INST_SIN_12;
            `INST_SIN_12: next_state = `INST_SIN_13;
            `INST_SIN_13: next_state = `INST_NOP;
            `INST_LFSR_2: next_state = `INST_LFSR_3;
            `INST_LFSR_3: next_state = `INST_LFSR_4;
            `INST_LFSR_4: next_state = `INST_NOP;
            `INST_OUTPUT_2: next_state = `INST_NOP;
            `INST_OUTPUT_A_2: next_state = `INST_NOP;
            `INST_DITHER_UPDATE_2: next_state = `INST_DITHER_UPDATE_3;
            `INST_DITHER_UPDATE_3: next_state = `INST_DITHER_UPDATE_4;
            `INST_DITHER_UPDATE_4: next_state = `INST_NOP;
            `INST_ACC_TO_IMM_2: next_state = `INST_ACC_TO_IMM_3;
            `INST_ACC_TO_IMM_3: next_state = `INST_NOP;
            default: next_state = `INST_NOP;
        endcase
    end
endmodule

module fms_control_function(
        input [`STATE_BITS-1:0] state,
        output reg [`CONTROL_BITS-1:0] control
    );
    always @* begin
        case (state)
            `INST_NOP: control = `RES_MEM | `C_INST_DONE;
            `INST_ACC_IMM_TO_MEM: control = `RES_EXP2 | `F1_WE;
            `INST_MACC_TO_MEM: control = `RES_MEM | `F1_WE;
            `INST_WADD: control = `RES_ZERO | `T_WE;
            `INST_LPFILTER: control = `RES_MEM | `T_WE;
            `INST_PULSE_EXP2: control = `RES_ONE | `F1_WE | `F2_WE;
            `INST_PULSE: control = `RES_M_ONE | `F1_WE;
            `INST_TRIANGLE: control = `RES_ONE | `F1_WE;
            `INST_SINA2: control = `RES_TWO | `F1_WE | `SIGN_WE;
            `INST_SIN: control = `RES_TWO | `F1_WE | `SIGN_WE;
            `INST_LFSR: control = `RES_TWO | `F1_WE;
            `INST_OUTPUT: control = `RES_MEM | `OUTPUT_WE;
            `INST_OUTPUT_A: control = `RES_ZERO | `F1_WE | `F2_WE;
            `INST_DITHER_UPDATE: control = `RES_MEM | `T_WE | `BIAS_WE;
            `INST_IMM: control = `RES_MEM | `T_WE | `F1_WE | `F2_WE | `C_TRUNC | `C_INST_DONE;
            `INST_ACC_TO_IMM: control = `RES_EXP2 | `F1_WE;
            `INST_ACC_IMM_TO_MEM_2: control = `RES_MEM | `F2_WE;
            `INST_ACC_IMM_TO_MEM_3: control = `RES_MEM | `T_WE | `C_MEM_ADDR;
            `INST_ACC_IMM_TO_MEM_4: control = `RES_MADD | `T_WE | `F1_WE | `F2_WE | `OVERFLOW_WE | `C_TRUNC | `C_DITHER | `C_M_WE | `C_MEM_ADDR | `C_INST_DONE;
            `INST_MACC_TO_MEM_2: control = `RES_MEM | `T_WE | `C_MEM_ADDR;
            `INST_MACC_TO_MEM_3: control = `RES_MADD | `C_CLAMP | `C_M_WE | `C_MEM_ADDR;
            `INST_MACC_TO_MEM_4: control = `RES_ONE | `F1_WE;
            `INST_MACC_TO_MEM_5: control = `RES_ZERO | `T_WE;
            `INST_WADD_2: control = `RES_MEM | `F1_WE;
            `INST_WADD_3: control = `RES_MADD | `F2_WE;
            `INST_WADD_4: control = `RES_EXP2 | `F1_WE;
            `INST_WADD_5: control = `RES_MADD | `F2_WE;
            `INST_WADD_6: control = `RES_MEM | `T_WE | `C_MEM_ADDR;
            `INST_WADD_7: control = `RES_MADD | `T_WE | `F1_WE | `F2_WE | `C_TRUNC | `C_INST_DONE;
            `INST_LPFILTER_2: control = `RES_M_ONE | `F1_WE;
            `INST_LPFILTER_3: control = `RES_MEM | `F2_WE | `C_MEM_ADDR;
            `INST_LPFILTER_4: control = `RES_MADD | `F2_WE | `C_CLAMP;
            `INST_LPFILTER_5: control = `RES_MEM | `T_WE | `C_MEM_ADDR;
            `INST_LPFILTER_6: control = `RES_EXP2 | `F1_WE;
            `INST_LPFILTER_7: control = `RES_MADD | `T_WE | `F1_WE | `F2_WE | `C_CLAMP | `C_TRUNC | `C_DITHER | `C_M_WE | `C_MEM_ADDR | `C_INST_DONE;
            `INST_PULSE_EXP2_2: control = `RES_MADD | `T_WE;
            `INST_PULSE_EXP2_3: control = `RES_M_ONE | `F1_WE;
            `INST_PULSE_EXP2_4: control = `RES_EXP2 | `F2_WE;
            `INST_PULSE_2: control = `RES_MEM | `F2_WE;
            `INST_PULSE_3: control = `RES_MADD | `F2_WE;
            `INST_PULSE_4: control = `RES_ZERO | `SIGN_WE;
            `INST_PULSE_5: control = `RES_MAXVAL | `T_WE | `F1_WE | `F2_WE | `C_STORED_SIGN | `C_TRUNC | `C_INST_DONE;
            `INST_TRIANGLE_2: control = `RES_EXP2 | `F2_WE;
            `INST_TRIANGLE_3: control = `RES_MADD | `T_WE | `F1_WE | `F2_WE | `C_TRUNC;
            `INST_TRIANGLE_4: control = `RES_M_ONE | `T_WE | `SIGN_WE;
            `INST_TRIANGLE_5: control = `RES_TWO | `F1_WE | `C_STORED_SIGN;
            `INST_SINA2_2: control = `RES_ONE | `T_WE;
            `INST_SINA2_3: control = `RES_MADD | `F1_WE | `F2_WE | `C_TRUNC;
            `INST_SINA2_4: control = `RES_M_ONE | `T_WE;
            `INST_SIN_2: control = `RES_ONE | `T_WE;
            `INST_SIN_3: control = `RES_MADD | `F1_WE | `F2_WE | `C_TRUNC;
            `INST_SIN_4: control = `RES_ZERO | `T_WE;
            `INST_SIN_5: control = `RES_MADD | `F1_WE;
            `INST_SIN_6: control = `RES_M_6_FIFTHS | `T_WE;
            `INST_SIN_7: control = `RES_1_FIFTH | `F2_WE;
            `INST_SIN_8: control = `RES_MADD | `F2_WE;
            `INST_SIN_9: control = `RES_ONE | `T_WE;
            `INST_SIN_10: control = `RES_MADD | `F2_WE;
            `INST_SIN_11: control = `RES_ONE | `F1_WE | `C_STORED_SIGN;
            `INST_SIN_12: control = `RES_ZERO | `T_WE;
            `INST_SIN_13: control = `RES_MADD | `T_WE | `F1_WE | `F2_WE | `C_CLAMP | `C_TRUNC | `C_INST_DONE;
            `INST_LFSR_2: control = `RES_MEM | `F2_WE;
            `INST_LFSR_3: control = `RES_LFSR | `T_WE;
            `INST_LFSR_4: control = `RES_MADD | `T_WE | `F1_WE | `F2_WE | `C_TRUNC | `C_M_WE | `C_CONDITIONAL_M_WE | `C_INST_DONE;
            `INST_OUTPUT_2: control = `RES_ZERO | `T_WE | `F1_WE | `F2_WE | `C_TRUNC | `C_M_WE | `C_INST_DONE;
            `INST_OUTPUT_A_2: control = `RES_MADD | `T_WE | `F1_WE | `F2_WE | `OUTPUT_WE | `C_TRUNC | `C_INST_DONE;
            `INST_DITHER_UPDATE_2: control = `RES_ONE | `F1_WE;
            `INST_DITHER_UPDATE_3: control = `RES_EPS | `F2_WE;
            `INST_DITHER_UPDATE_4: control = `RES_MADD | `T_WE | `F1_WE | `F2_WE | `C_TRUNC | `C_M_WE | `C_INST_DONE;
            `INST_ACC_TO_IMM_2: control = `RES_MEM | `T_WE;
            `INST_ACC_TO_IMM_3: control = `RES_MADD | `T_WE | `F1_WE | `F2_WE | `OVERFLOW_WE | `C_TRUNC | `C_DITHER | `C_M_WE | `C_INST_DONE;
            default: control = `RES_MEM | `C_INST_DONE;
        endcase
    end
endmodule
